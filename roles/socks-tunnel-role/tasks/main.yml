---
- name: set account code and transactin|job id
  set_fact:
    account_code: "{{ acc_id | default('NA') }}"
    trans_num: "{{ transaction_id | default(999999999999999 | random(start=1)) | replace('\"', '') }}"

- name: Set jumphost facts
  set_fact:
    "{{ 'jumphost' ~ (level + 1) ~ '_ip' }}": "{{ hostvars['localhost']['jump_hosts'][level]['ip'] }}"
    "{{ 'jumphost' ~ (level + 1) ~ '_ssh_user' }}": "{{ hostvars['localhost']['jump_hosts'][level]['ssh_user'] }}"
    "{{ 'jumphost' ~ (level + 1) ~ '_ssh_port' }}": "{{ hostvars['localhost']['jump_hosts'][level]['ssh_port'] }}"
    "{{ 'jumphost' ~ (level + 1) ~ '_ssh_private_key' }}": "{{ hostvars['localhost']['jump_hosts'][level]['ssh_private_key'] }}"
    "{{ 'jumphost' ~ (level + 1) ~ '_ssh_private_key_passphrase' }}": "{{
      hostvars['localhost']['jump_hosts'][level]['ssh_private_key_passphrase']|default('') }}"
  loop: "{{ (hostvars['localhost']['jump_hosts'])|default([]) }}"
  loop_control:
    index_var: level
  when: hostvars['localhost']['jump_hosts'] is defined

- name: Default jumphost facts to extra variables
  set_fact:
    "{{ 'jumphost_ip' }}": "{{ vars.get('jh_ip') }}"
    "{{ 'jumphost_ssh_user' }}": "{{ vars.get('jh_ssh_user') }}"
    "{{ 'jumphost_ssh_port' }}": "{{ vars.get('jh_ssh_port') }}"
    "{{ 'jumphost_ssh_private_key' }}": "{{ lookup('vars', 'jh_ssh_private_key') }}"
    "{{ 'jumphost_ssh_private_key_passphrase' }}": "{{ lookup('vars', 'jh_ssh_private_key_passphrase') }}"

- name: Creating socks tunnel without passphrase for single jumphost
  block:
    - name: Setting of required socks_port variables for single jumphost
      set_fact:
        jh_socks_port: "{{ jh_socks_port }}"
      when:
        - jh_socks_port is defined

    - name: Being an animal and doing it anyway
      shell: bash -c 'ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=yes -CfNq -D /tmp/mysocks-{{ account_code }}-{{ trans_num }}-{{ jh_socks_port }} -i {{ jumphost_ssh_private_key }} -p {{ jumphost_ssh_port }} {{ jumphost_ssh_user }}@{{ jumphost_ip }} -vvvvvv;sleep 5'
    
#    - name: Creating socks tunnel without passphrase for single jumphost
#      shell: |
#        ps -ef | grep '/tmp/mysocks-{{ account_code }}-{{ trans_num }}-{{ jh_socks_port }}' | grep -v grep
#        if [ $? -ne 0 ]; then
#          bash -c 'ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=no -CfNq -D /tmp/mysocks-{{ account_code }}-{{ trans_num }}-{{ jh_socks_port }} -i {{ jumphost_ssh_private_key }} -p {{ jumphost_ssh_port }} {{ jumphost_ssh_user }}@{{ jumphost_ip }} -vvvvvv;sleep 5'
#        fi
#  when:
#    - jumphost_ssh_private_key is defined and (jumphost_ssh_private_key|length > 0)
#    - (jumphost_ssh_private_key_passphrase is undefined) or (jumphost_ssh_private_key_passphrase is none) or (jumphost_ssh_private_key_passphrase | trim == '')


- name: Validate created unix socket
  block:
    - name: Validate socks file
      stat:
        path: /tmp/mysocks-{{ account_code }}-{{ trans_num }}-{{ jh_socks_port }}
      register: file_stat

    - name: Set fact for validate socks file
      set_fact:
        Socks_File_Created: "{{ 'SUCCESS' if file_stat.stat.exists == true else 'FAILED' }}"

    - debug: var=jh_socks_port
  when: jh_socks_port is defined
